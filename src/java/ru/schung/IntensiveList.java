package ru.schung;

import java.util.Comparator;

public interface IntensiveList<E> {
    /**
     * Возвращает количество элементов в списке.
     * @return Количество элементов в списке.
     */
    int size();
    /**
     * Добавляет элемент в конец списка.
     * @param element Элемент для добавления.
     */
    void add(E element);
    /**
     * Добавляет элемент в указанную позицию в списке.
     * @param index Позиция, куда нужно добавить элемент.
     * @param element Элемент для добавления.
     */
    void add(int index, E element);
    /**
     * Возвращает элемент по указанному индексу.
     * @param index Индекс элемента, который нужно вернуть.
     * @return Элемент по указанному индексу.
     */
    E get(int index);
    /**
     * Заменяет элемент в указанной позиции на новый элемент и возвращает старый элемент.
     * @param index Индекс элемента, который нужно заменить.
     * @param element Новый элемент для замены.
     * @return Старый элемент в указанной позиции.
     */
    E set(int index, E element);
    /**
     * Удаляет элемент из указанной позиции и возвращает удаленный элемент.
     * @param index Индекс элемента, который нужно удалить.
     * @return Удаленный элемент из указанной позиции.
     */
    E remove(int index);
    /**
     * Удаляет все элементы из списка.
     */
    void clear();
    /**
     * Быстрая сортировка списка с использованием заданного компаратора.
     * @param comparator Компаратор для сортировки элементов списка.
     */
    void quickSort(Comparator<E> comparator);
    /**
     * Проверяет, отсортирован ли список.
     * @return true, если список отсортирован, в противном случае - false.
     */
    boolean isSorted();
    /**
     * Обрезает список до указанного размера.
     * @param size Новый размер списка после обрезки.
     */
    void split(int size);
}
